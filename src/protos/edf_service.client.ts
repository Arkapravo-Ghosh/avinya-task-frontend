// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "src/protos/edf_service.proto" (package "edf_service", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EdfService } from "./edf_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EdfData } from "./edf_service";
import type { EdfRequest } from "./edf_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service edf_service.EdfService
 */
export interface IEdfServiceClient {
    /**
     * @generated from protobuf rpc: StreamEdfData(edf_service.EdfRequest) returns (stream edf_service.EdfData);
     */
    streamEdfData(input: EdfRequest, options?: RpcOptions): ServerStreamingCall<EdfRequest, EdfData>;
}
/**
 * @generated from protobuf service edf_service.EdfService
 */
export class EdfServiceClient implements IEdfServiceClient, ServiceInfo {
    typeName = EdfService.typeName;
    methods = EdfService.methods;
    options = EdfService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamEdfData(edf_service.EdfRequest) returns (stream edf_service.EdfData);
     */
    streamEdfData(input: EdfRequest, options?: RpcOptions): ServerStreamingCall<EdfRequest, EdfData> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EdfRequest, EdfData>("serverStreaming", this._transport, method, opt, input);
    }
}
