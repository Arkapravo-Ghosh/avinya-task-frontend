// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "src/protos/edf_service.proto" (package "edf_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message edf_service.EdfRequest
 */
export interface EdfRequest {
}
/**
 * @generated from protobuf message edf_service.EdfData
 */
export interface EdfData {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class EdfRequest$Type extends MessageType<EdfRequest> {
    constructor() {
        super("edf_service.EdfRequest", []);
    }
    create(value?: PartialMessage<EdfRequest>): EdfRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EdfRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EdfRequest): EdfRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EdfRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message edf_service.EdfRequest
 */
export const EdfRequest = new EdfRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EdfData$Type extends MessageType<EdfData> {
    constructor() {
        super("edf_service.EdfData", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EdfData>): EdfData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = "";
        if (value !== undefined)
            reflectionMergePartial<EdfData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EdfData): EdfData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EdfData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message edf_service.EdfData
 */
export const EdfData = new EdfData$Type();
/**
 * @generated ServiceType for protobuf service edf_service.EdfService
 */
export const EdfService = new ServiceType("edf_service.EdfService", [
    { name: "StreamEdfData", serverStreaming: true, options: {}, I: EdfRequest, O: EdfData }
]);
